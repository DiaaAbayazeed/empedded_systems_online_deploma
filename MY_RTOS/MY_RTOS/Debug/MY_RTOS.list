
MY_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d9c  08000d9c  00010da4  2**0
                  CONTENTS
  4 .ARM          00000000  08000d9c  08000d9c  00010da4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d9c  08000da4  00010da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d9c  08000d9c  00010d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000000  08000da4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08000da4  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010dcd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014ed  00000000  00000000  00010e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006cc  00000000  00000000  000122fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000928  00000000  00000000  000129c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b0  00000000  00000000  000132f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000168  00000000  00000000  000134a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003274  00000000  00000000  00013610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000021d2  00000000  00000000  00016884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000d7e1  00000000  00000000  00018a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000051c  00000000  00000000  00026238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d60 	.word	0x08000d60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d60 	.word	0x08000d60

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <FIFO_init>:
 */


#include "FIFO_stack.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d101      	bne.n	800019a <FIFO_init+0x16>
		return FIFO_NULL;
 8000196:	2303      	movs	r3, #3
 8000198:	e011      	b.n	80001be <FIFO_init+0x3a>

	fifo->base = buff ;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	68da      	ldr	r2, [r3, #12]
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001bc:	2300      	movs	r3, #0

}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d003      	beq.n	80001e2 <FIFO_enqueue+0x1a>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80001e2:	2303      	movs	r3, #3
 80001e4:	e02d      	b.n	8000242 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	685a      	ldr	r2, [r3, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d107      	bne.n	8000202 <FIFO_enqueue+0x3a>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80001fe:	2301      	movs	r3, #1
 8000200:	e01f      	b.n	8000242 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	68d2      	ldr	r2, [r2, #12]
 800021c:	4611      	mov	r1, r2
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6912      	ldr	r2, [r2, #16]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	440a      	add	r2, r1
 8000226:	3a04      	subs	r2, #4
 8000228:	4293      	cmp	r3, r2
 800022a:	d104      	bne.n	8000236 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68da      	ldr	r2, [r3, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	e004      	b.n	8000240 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	1d1a      	adds	r2, r3, #4
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000240:	2300      	movs	r3, #0


}
 8000242:	4618      	mov	r0, r3
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <FIFO_dequeue+0x1a>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d101      	bne.n	800026a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000266:	2303      	movs	r3, #3
 8000268:	e028      	b.n	80002bc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	429a      	cmp	r2, r3
 8000274:	d101      	bne.n	800027a <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8000276:	2302      	movs	r3, #2
 8000278:	e020      	b.n	80002bc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1e5a      	subs	r2, r3, #1
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	68d2      	ldr	r2, [r2, #12]
 8000296:	4611      	mov	r1, r2
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6912      	ldr	r2, [r2, #16]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	440a      	add	r2, r1
 80002a0:	3a04      	subs	r2, #4
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d104      	bne.n	80002b0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68da      	ldr	r2, [r3, #12]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	e004      	b.n	80002ba <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	1d1a      	adds	r2, r3, #4
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
	if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
	{
		NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0152      	lsls	r2, r2, #5
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
	else
	{
		SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
	}
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
		SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0152      	lsls	r2, r2, #5
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800032c:	d301      	bcc.n	8000332 <SysTick_Config+0x16>
	{
		return (1UL);                                                   /* Reload value impossible */
 800032e:	2301      	movs	r3, #1
 8000330:	e00f      	b.n	8000352 <SysTick_Config+0x36>
	}

	SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <SysTick_Config+0x40>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800033a:	2107      	movs	r1, #7
 800033c:	f04f 30ff 	mov.w	r0, #4294967295
 8000340:	f7ff ffc2 	bl	80002c8 <__NVIC_SetPriority>
	SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SysTick_Config+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SysTick_Config+0x40>)
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
			SysTick_CTRL_TICKINT_Msk   |
			SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
	return (0UL);                                                     /* Function successful */
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010

08000360 <NMI_Handler>:
 ******************************************************************************
 */

#include "OS_porting.h"
void NMI_Handler()
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("nop");
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:
	}
}
void HardFault_Handler()
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("nop");
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:
	}
}
void	MemManage_Handler()
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("nop");
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:
	}
}
void	BusFault_Handler()
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("nop");
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:
	}
}
void	UsageFault_Handler()
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("nop");
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <HW_init>:
	}
}

void HW_init()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	// change priority of PendSV to be equal SYStick to avoid two interrupt cut each
	// and to avoid to go back to each other  for example
	// >> SYStick handler   call PendSV
	// PendSV high priority and cut SYSTick when it finish it get back to SYStick
	// for this reasons I use this fun __NVIC_SetPriority
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800038c:	210f      	movs	r1, #15
 800038e:	f06f 0001 	mvn.w	r0, #1
 8000392:	f7ff ff99 	bl	80002c8 <__NVIC_SetPriority>


}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}

0800039a <SVC_Handler>:
__attribute ((naked)) void SVC_Handler()
{
	__asm("TST     LR,#4 \n\t "
 800039a:	f01e 0f04 	tst.w	lr, #4
 800039e:	bf0c      	ite	eq
 80003a0:	f3ef 8008 	mrseq	r0, MSP
 80003a4:	f3ef 8009 	mrsne	r0, PSP
 80003a8:	f000 bb20 	b.w	80009ec <OS_SVC_Handle>
			"ITE     EQ  \n\t"
			"MRSEQ   R0,MSP \n\t"
			"MRSNE   R0,PSP  \n\t"
			"b       OS_SVC_Handle");

}
 80003ac:	bf00      	nop
	...

080003b0 <trigger_OS_PendSV>:


void trigger_OS_PendSV()
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0


	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <trigger_OS_PendSV+0x18>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <trigger_OS_PendSV+0x18>)
 80003ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003be:	6053      	str	r3, [r2, #4]



}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <Start_Ticker>:
void Start_Ticker()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	//Fcpu = 8MHZ
	//Tick time 1/8=125 nsec
	//generate irq every 1ms
	// required 8000 tick

	SysTick_Config(8000);
 80003d0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80003d4:	f7ff ffa2 	bl	800031c <SysTick_Config>


}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <SysTick_Handler>:

void SysTick_Handler()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	Task_wait_handle();
 80003e0:	f000 fb72 	bl	8000ac8 <Task_wait_handle>
	// determine next task
	Decide_WhatNextTask();
 80003e4:	f000 fab0 	bl	8000948 <Decide_WhatNextTask>
	// switch context
	trigger_OS_PendSV();
 80003e8:	f7ff ffe2 	bl	80003b0 <trigger_OS_PendSV>


}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <OS_IdeleTask>:
Task_ref* QUeue_buff[100];
Task_ref Idle_task;


void  OS_IdeleTask()
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("WFE");
 80003f4:	bf20      	wfe
 80003f6:	e7fd      	b.n	80003f4 <OS_IdeleTask+0x4>

080003f8 <MYRTOS_init_mainStack>:
	}


}
void MYRTOS_init_mainStack()
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	/* locate the size of main stack in 3072 byte*/
	OS_Control_schaduler._S_MSP_Task=(unsigned int)&_estack;
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <MYRTOS_init_mainStack+0x34>)
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MYRTOS_init_mainStack+0x38>)
 8000400:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_schaduler._E_MSP_Task=( OS_Control_schaduler._S_MSP_Task - MainStackSize); // Stack size is 3072
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <MYRTOS_init_mainStack+0x38>)
 8000406:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800040a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <MYRTOS_init_mainStack+0x38>)
 8000410:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	/* locate first PSP task after word from end of MSP task*/
	OS_Control_schaduler.PSP_Task_Locator =(OS_Control_schaduler._E_MSP_Task -8);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MYRTOS_init_mainStack+0x38>)
 8000416:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800041a:	3b08      	subs	r3, #8
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <MYRTOS_init_mainStack+0x38>)
 800041e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20005000 	.word	0x20005000
 8000430:	2000001c 	.word	0x2000001c

08000434 <MyRTOS_Create_TaskStack>:

void MyRTOS_Create_TaskStack(Task_ref* Task)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Task->Current_PSP = (unsigned int*)Task->_S_PSP_Task ;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	691b      	ldr	r3, [r3, #16]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	619a      	str	r2, [r3, #24]

	Task->Current_PSP-- ;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	1f1a      	subs	r2, r3, #4
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	619a      	str	r2, [r3, #24]
	*(Task->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000458:	601a      	str	r2, [r3, #0]

	Task->Current_PSP-- ;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	1f1a      	subs	r2, r3, #4
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	619a      	str	r2, [r3, #24]
	*(Task->Current_PSP) = (unsigned int)Task->p_TaskEntry ; //PC
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	601a      	str	r2, [r3, #0]

	Task->Current_PSP-- ;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	1f1a      	subs	r2, r3, #4
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	619a      	str	r2, [r3, #24]
	*(Task->Current_PSP)  = 0xFFFFFFFD ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f06f 0202 	mvn.w	r2, #2
 8000480:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	e00b      	b.n	80004a0 <MyRTOS_Create_TaskStack+0x6c>
	{
		Task->Current_PSP-- ;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	1f1a      	subs	r2, r3, #4
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	619a      	str	r2, [r3, #24]
		*(Task->Current_PSP)  = 0 ;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2b0c      	cmp	r3, #12
 80004a4:	ddf0      	ble.n	8000488 <MyRTOS_Create_TaskStack+0x54>

	}
}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
	...

080004b4 <MYRTOS_CreateTask>:

/* create task */
MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Task)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error =NoError;
 80004bc:	2300      	movs	r3, #0
 80004be:	73fb      	strb	r3, [r7, #15]
	//	- _E_PSP_Task	-
	//	-				-
	//	- _eheap		-
	//	-				-
	//
	Task->_S_PSP_Task= OS_Control_schaduler.PSP_Task_Locator;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MYRTOS_CreateTask+0x74>)
 80004c2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	611a      	str	r2, [r3, #16]
	Task->_E_PSP_Task= (Task->_S_PSP_Task - Task->Stack_Size);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	691a      	ldr	r2, [r3, #16]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	1ad2      	subs	r2, r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	615a      	str	r2, [r3, #20]

	//Check task stack size exceeded the PSP stack to heap
	if((Task->_E_PSP_Task) < (unsigned int)(&(_eheap)))
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a13      	ldr	r2, [pc, #76]	; (800052c <MYRTOS_CreateTask+0x78>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d201      	bcs.n	80004e6 <MYRTOS_CreateTask+0x32>
		error = Task_exceeded_StackSize;
 80004e2:	2302      	movs	r3, #2
 80004e4:	73fb      	strb	r3, [r7, #15]

	// put 8 byte between stack and next stack
	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control_schaduler.PSP_Task_Locator= (Task->_E_PSP_Task - 8);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	3b08      	subs	r3, #8
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <MYRTOS_CreateTask+0x74>)
 80004ee:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//update sch Table
	OS_Control_schaduler.OSTasks[OS_Control_schaduler.NoOfActiveTasks]= Task ;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MYRTOS_CreateTask+0x74>)
 80004f4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80004f8:	490b      	ldr	r1, [pc, #44]	; (8000528 <MYRTOS_CreateTask+0x74>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control_schaduler.NoOfActiveTasks++ ;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MYRTOS_CreateTask+0x74>)
 8000502:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000506:	3301      	adds	r3, #1
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <MYRTOS_CreateTask+0x74>)
 800050a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	// task state suspend at init
	Task->TaskState =Suspend;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack(Task);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff8c 	bl	8000434 <MyRTOS_Create_TaskStack>

	return error;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000001c 	.word	0x2000001c
 800052c:	20000a88 	.word	0x20000a88

08000530 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError;
 8000536:	2300      	movs	r3, #0
 8000538:	71fb      	strb	r3, [r7, #7]

	/* update os to suspend mode */
	OS_Control_schaduler.OSmodeID = OSsuspend;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MYRTOS_init+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/* specify the main stack for OS */
	MYRTOS_init_mainStack();
 8000542:	f7ff ff59 	bl	80003f8 <MYRTOS_init_mainStack>

	/* create OS Ready queue */
	if(FIFO_init(&Ready_queue, QUeue_buff, 100) != FIFO_NO_ERROR )
 8000546:	2264      	movs	r2, #100	; 0x64
 8000548:	4912      	ldr	r1, [pc, #72]	; (8000594 <MYRTOS_init+0x64>)
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <MYRTOS_init+0x68>)
 800054c:	f7ff fe1a 	bl	8000184 <FIFO_init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MYRTOS_init+0x2a>
	{
		error =Ready_Queue_init_error;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
	}

	/* Configure IDLE TASK  */
	strcpy(Idle_task.TaskName,"Idle task");
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MYRTOS_init+0x6c>)
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <MYRTOS_init+0x70>)
 800055e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000560:	c303      	stmia	r3!, {r0, r1}
 8000562:	801a      	strh	r2, [r3, #0]
	Idle_task.priority =255;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MYRTOS_init+0x74>)
 8000566:	22ff      	movs	r2, #255	; 0xff
 8000568:	711a      	strb	r2, [r3, #4]
	Idle_task.p_TaskEntry =&OS_IdeleTask;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MYRTOS_init+0x74>)
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <MYRTOS_init+0x78>)
 800056e:	609a      	str	r2, [r3, #8]
	Idle_task.Stack_Size=400;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MYRTOS_init+0x74>)
 8000572:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000576:	601a      	str	r2, [r3, #0]
	Idle_task.TaskState= Suspend;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <MYRTOS_init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	MYRTOS_CreateTask(&Idle_task);
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <MYRTOS_init+0x74>)
 8000582:	f7ff ff97 	bl	80004b4 <MYRTOS_CreateTask>

	return error;
 8000586:	79fb      	ldrb	r3, [r7, #7]

}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000001c 	.word	0x2000001c
 8000594:	200001dc 	.word	0x200001dc
 8000598:	200001c8 	.word	0x200001c8
 800059c:	20000388 	.word	0x20000388
 80005a0:	08000d78 	.word	0x08000d78
 80005a4:	2000036c 	.word	0x2000036c
 80005a8:	080003f1 	.word	0x080003f1

080005ac <OS_SVC_SET>:



/* OS generate interrupt with setting SVC handler*/
void OS_SVC_SET(SVC_ID ID)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d817      	bhi.n	80005ec <OS_SVC_SET+0x40>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <OS_SVC_SET+0x18>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005d9 	.word	0x080005d9
 80005c8:	080005dd 	.word	0x080005dd
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	080005e5 	.word	0x080005e5
 80005d4:	080005e9 	.word	0x080005e9
	{
	case SVC_Activatetask:
		__asm("SVC  #0x00");
 80005d8:	df00      	svc	0
		break;
 80005da:	e009      	b.n	80005f0 <OS_SVC_SET+0x44>
	case 	SVC_terminateTask:
		__asm("SVC  #0x01");
 80005dc:	df01      	svc	1
		break;
 80005de:	e007      	b.n	80005f0 <OS_SVC_SET+0x44>
	case SVC_TaskWaitingTime:
		__asm("SVC  #0x02");
 80005e0:	df02      	svc	2
		break;
 80005e2:	e005      	b.n	80005f0 <OS_SVC_SET+0x44>
	case SVC_AquireMutex:
		__asm("SVC  #0x03");
 80005e4:	df03      	svc	3
		break;
 80005e6:	e003      	b.n	80005f0 <OS_SVC_SET+0x44>
	case SVC_ReleaseMutex:
		__asm("SVC  #0x04");
 80005e8:	df04      	svc	4
		break;
 80005ea:	e001      	b.n	80005f0 <OS_SVC_SET+0x44>
	default :
		__asm("SVC  #0x05");
 80005ec:	df05      	svc	5
		break;
 80005ee:	bf00      	nop
	}

}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <BubbleSort>:


void BubbleSort()
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
	int i ,j,n;
	Task_ref* temp;
	n =OS_Control_schaduler.NoOfActiveTasks;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <BubbleSort+0x8c>)
 8000604:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000608:	607b      	str	r3, [r7, #4]
	for(i=0;i<n-1;i++)
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e030      	b.n	8000672 <BubbleSort+0x76>
	{
		for(j=0;j<n-i-1;j++)
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e023      	b.n	800065e <BubbleSort+0x62>
		{
			if(OS_Control_schaduler.OSTasks[j]->priority > OS_Control_schaduler.OSTasks[j+1]->priority)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <BubbleSort+0x8c>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	791a      	ldrb	r2, [r3, #4]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	4918      	ldr	r1, [pc, #96]	; (8000688 <BubbleSort+0x8c>)
 8000626:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d913      	bls.n	8000658 <BubbleSort+0x5c>
			{
				temp = OS_Control_schaduler.OSTasks[j+1];
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <BubbleSort+0x8c>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	603b      	str	r3, [r7, #0]
				OS_Control_schaduler.OSTasks[j+1]=OS_Control_schaduler.OSTasks[j];
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	3301      	adds	r3, #1
 8000640:	4911      	ldr	r1, [pc, #68]	; (8000688 <BubbleSort+0x8c>)
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000648:	490f      	ldr	r1, [pc, #60]	; (8000688 <BubbleSort+0x8c>)
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control_schaduler.OSTasks[j]=temp;
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <BubbleSort+0x8c>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0;j<n-i-1;j++)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3301      	adds	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	3b01      	subs	r3, #1
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbd4      	blt.n	8000616 <BubbleSort+0x1a>
	for(i=0;i<n-1;i++)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3b01      	subs	r3, #1
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	dbc9      	blt.n	8000610 <BubbleSort+0x14>
			}
		}
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	2000001c 	.word	0x2000001c

0800068c <MyRTOS_Update_Schadule_tables>:

void MyRTOS_Update_Schadule_tables()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	Task_ref* item;
	Task_ref* PCurrentTask;
	Task_ref* PNextTask;
	int i=0;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	BubbleSort();
 8000696:	f7ff ffb1 	bl	80005fc <BubbleSort>

	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_queue, &item) != FIFO_EMPTY);
 800069a:	bf00      	nop
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4827      	ldr	r0, [pc, #156]	; (8000740 <MyRTOS_Update_Schadule_tables+0xb4>)
 80006a2:	f7ff fdd3 	bl	800024c <FIFO_dequeue>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d1f7      	bne.n	800069c <MyRTOS_Update_Schadule_tables+0x10>


	//3- update ready queue
	while(OS_Control_schaduler.NoOfActiveTasks >= i)
 80006ac:	e03d      	b.n	800072a <MyRTOS_Update_Schadule_tables+0x9e>
	{
		PCurrentTask=OS_Control_schaduler.OSTasks[i];
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <MyRTOS_Update_Schadule_tables+0xb8>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b6:	60bb      	str	r3, [r7, #8]
		PNextTask=OS_Control_schaduler.OSTasks[i+1];
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <MyRTOS_Update_Schadule_tables+0xb8>)
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	607b      	str	r3, [r7, #4]
		// if we have only one task in the buffer and this task is on suspend state or new task in high priority
		if(PCurrentTask->TaskState != Suspend)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d02a      	beq.n	8000724 <MyRTOS_Update_Schadule_tables+0x98>
		{
			if(PNextTask->TaskState == Suspend)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d108      	bne.n	80006ea <MyRTOS_Update_Schadule_tables+0x5e>
			{
				PCurrentTask->TaskState =ready ;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2203      	movs	r2, #3
 80006dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				FIFO_enqueue(&Ready_queue, PCurrentTask);
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	4817      	ldr	r0, [pc, #92]	; (8000740 <MyRTOS_Update_Schadule_tables+0xb4>)
 80006e4:	f7ff fd70 	bl	80001c8 <FIFO_enqueue>
				break;
 80006e8:	e026      	b.n	8000738 <MyRTOS_Update_Schadule_tables+0xac>
			}

			// if we have only one highest priority task in waiting state
			if(PCurrentTask->priority < PNextTask->priority)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	791a      	ldrb	r2, [r3, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d208      	bcs.n	8000708 <MyRTOS_Update_Schadule_tables+0x7c>
			{
				PCurrentTask->TaskState =ready ;
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2203      	movs	r2, #3
 80006fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				FIFO_enqueue(&Ready_queue, PCurrentTask);
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <MyRTOS_Update_Schadule_tables+0xb4>)
 8000702:	f7ff fd61 	bl	80001c8 <FIFO_enqueue>
				break;
 8000706:	e017      	b.n	8000738 <MyRTOS_Update_Schadule_tables+0xac>
			}
			//if we have some tasks in the same priority in highest priority
			else if(PCurrentTask->priority == PNextTask->priority)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	791a      	ldrb	r2, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	d107      	bne.n	8000724 <MyRTOS_Update_Schadule_tables+0x98>
			{
				PCurrentTask->TaskState =ready ;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2203      	movs	r2, #3
 8000718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				FIFO_enqueue(&Ready_queue, PCurrentTask);
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <MyRTOS_Update_Schadule_tables+0xb4>)
 8000720:	f7ff fd52 	bl	80001c8 <FIFO_enqueue>
			}
		}
		i++;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
	while(OS_Control_schaduler.NoOfActiveTasks >= i)
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MyRTOS_Update_Schadule_tables+0xb8>)
 800072c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	429a      	cmp	r2, r3
 8000734:	d2bb      	bcs.n	80006ae <MyRTOS_Update_Schadule_tables+0x22>
	//
	//
	//			i++ ;
	//		}

}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001c8 	.word	0x200001c8
 8000744:	2000001c 	.word	0x2000001c

08000748 <MYRTOS_ActivateTask>:




void MYRTOS_ActivateTask (Task_ref* Task)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	Task->TaskState = Waiting ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2202      	movs	r2, #2
 8000754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_SET(SVC_Activatetask);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff ff27 	bl	80005ac <OS_SVC_SET>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <MYRTOS_TerminateTask>:
void MYRTOS_TerminateTask (Task_ref* Task)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	Task->TaskState = Suspend ;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_SET(SVC_terminateTask);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff18 	bl	80005ac <OS_SVC_SET>


}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <PendSV_Handler>:

	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control_schaduler.CurrentTask->Current_PSP);
 8000784:	4b6f      	ldr	r3, [pc, #444]	; (8000944 <PendSV_Handler+0x1c0>)
 8000786:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078a:	f3ef 8009 	mrs	r0, PSP
 800078e:	4602      	mov	r2, r0
 8000790:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 8000792:	4b6c      	ldr	r3, [pc, #432]	; (8000944 <PendSV_Handler+0x1c0>)
 8000794:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000798:	699a      	ldr	r2, [r3, #24]
 800079a:	3a04      	subs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R4" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 800079e:	4b69      	ldr	r3, [pc, #420]	; (8000944 <PendSV_Handler+0x1c0>)
 80007a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4622      	mov	r2, r4
 80007a8:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <PendSV_Handler+0x1c0>)
 80007ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	3a04      	subs	r2, #4
 80007b4:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R5" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 80007b6:	4b63      	ldr	r3, [pc, #396]	; (8000944 <PendSV_Handler+0x1c0>)
 80007b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	462a      	mov	r2, r5
 80007c0:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 80007c2:	4b60      	ldr	r3, [pc, #384]	; (8000944 <PendSV_Handler+0x1c0>)
 80007c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	3a04      	subs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R6" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 80007ce:	4b5d      	ldr	r3, [pc, #372]	; (8000944 <PendSV_Handler+0x1c0>)
 80007d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4632      	mov	r2, r6
 80007d8:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 80007da:	4b5a      	ldr	r3, [pc, #360]	; (8000944 <PendSV_Handler+0x1c0>)
 80007dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	3a04      	subs	r2, #4
 80007e4:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R7" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 80007e6:	4b57      	ldr	r3, [pc, #348]	; (8000944 <PendSV_Handler+0x1c0>)
 80007e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	463a      	mov	r2, r7
 80007f0:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 80007f2:	4b54      	ldr	r3, [pc, #336]	; (8000944 <PendSV_Handler+0x1c0>)
 80007f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	3a04      	subs	r2, #4
 80007fc:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R8" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 80007fe:	4b51      	ldr	r3, [pc, #324]	; (8000944 <PendSV_Handler+0x1c0>)
 8000800:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4642      	mov	r2, r8
 8000808:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 800080a:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <PendSV_Handler+0x1c0>)
 800080c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	3a04      	subs	r2, #4
 8000814:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R9" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <PendSV_Handler+0x1c0>)
 8000818:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	464a      	mov	r2, r9
 8000820:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <PendSV_Handler+0x1c0>)
 8000824:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	3a04      	subs	r2, #4
 800082c:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R10" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)));
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <PendSV_Handler+0x1c0>)
 8000830:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4652      	mov	r2, sl
 8000838:	601a      	str	r2, [r3, #0]
	OS_Control_schaduler.CurrentTask->Current_PSP--;
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <PendSV_Handler+0x1c0>)
 800083c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000840:	699a      	ldr	r2, [r3, #24]
 8000842:	3a04      	subs	r2, #4
 8000844:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,R11" : "=r"(*(OS_Control_schaduler.CurrentTask->Current_PSP)) );
 8000846:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <PendSV_Handler+0x1c0>)
 8000848:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	465a      	mov	r2, fp
 8000850:	601a      	str	r2, [r3, #0]

	//====================================
	//Restore the Context of the Next Task
	//====================================

	if (OS_Control_schaduler.NextTask != NULL)
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <PendSV_Handler+0x1c0>)
 8000854:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000858:	2b00      	cmp	r3, #0
 800085a:	d009      	beq.n	8000870 <PendSV_Handler+0xec>
	{
		OS_Control_schaduler.CurrentTask = OS_Control_schaduler.NextTask ;
 800085c:	4b39      	ldr	r3, [pc, #228]	; (8000944 <PendSV_Handler+0x1c0>)
 800085e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000862:	4a38      	ldr	r2, [pc, #224]	; (8000944 <PendSV_Handler+0x1c0>)
 8000864:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control_schaduler.NextTask = NULL ;
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <PendSV_Handler+0x1c0>)
 800086a:	2200      	movs	r2, #0
 800086c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <PendSV_Handler+0x1c0>)
 8000872:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	469b      	mov	fp, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <PendSV_Handler+0x1c0>)
 800087e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000882:	699a      	ldr	r2, [r3, #24]
 8000884:	3204      	adds	r2, #4
 8000886:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <PendSV_Handler+0x1c0>)
 800088a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	469a      	mov	sl, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <PendSV_Handler+0x1c0>)
 8000896:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	3204      	adds	r2, #4
 800089e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <PendSV_Handler+0x1c0>)
 80008a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4699      	mov	r9, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <PendSV_Handler+0x1c0>)
 80008ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	3204      	adds	r2, #4
 80008b6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <PendSV_Handler+0x1c0>)
 80008ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4698      	mov	r8, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <PendSV_Handler+0x1c0>)
 80008c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	3204      	adds	r2, #4
 80008ce:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <PendSV_Handler+0x1c0>)
 80008d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461f      	mov	r7, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <PendSV_Handler+0x1c0>)
 80008de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	3204      	adds	r2, #4
 80008e6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <PendSV_Handler+0x1c0>)
 80008ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	461e      	mov	r6, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <PendSV_Handler+0x1c0>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	3204      	adds	r2, #4
 80008fe:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <PendSV_Handler+0x1c0>)
 8000902:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	461d      	mov	r5, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <PendSV_Handler+0x1c0>)
 800090e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000912:	699a      	ldr	r2, [r3, #24]
 8000914:	3204      	adds	r2, #4
 8000916:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control_schaduler.CurrentTask->Current_PSP))  );
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <PendSV_Handler+0x1c0>)
 800091a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	461c      	mov	r4, r3
	OS_Control_schaduler.CurrentTask->Current_PSP++ ;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <PendSV_Handler+0x1c0>)
 8000926:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	3204      	adds	r2, #4
 800092e:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control_schaduler.CurrentTask->Current_PSP);
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <PendSV_Handler+0x1c0>)
 8000932:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4618      	mov	r0, r3
 800093a:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 800093e:	4770      	bx	lr

}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	2000001c 	.word	0x2000001c

08000948 <Decide_WhatNextTask>:

void Decide_WhatNextTask()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	//			FIFO_enqueue(&Ready_queue,OS_Control_schaduler.CurrentTask);
	//			OS_Control_schaduler.CurrentTask->TaskState=Running;
	//
	//		}
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_queue.counter == 0 && OS_Control_schaduler.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <Decide_WhatNextTask+0x98>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11a      	bne.n	800098a <Decide_WhatNextTask+0x42>
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 8000956:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800095e:	2b00      	cmp	r3, #0
 8000960:	d013      	beq.n	800098a <Decide_WhatNextTask+0x42>
	{
		OS_Control_schaduler.CurrentTask->TaskState = Running ;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 8000964:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000968:	2201      	movs	r2, #1
 800096a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_queue, OS_Control_schaduler.CurrentTask);
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 8000970:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000974:	4619      	mov	r1, r3
 8000976:	481a      	ldr	r0, [pc, #104]	; (80009e0 <Decide_WhatNextTask+0x98>)
 8000978:	f7ff fc26 	bl	80001c8 <FIFO_enqueue>
		OS_Control_schaduler.NextTask = OS_Control_schaduler.CurrentTask ;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 800097e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 8000984:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_queue, OS_Control_schaduler.CurrentTask);
			OS_Control_schaduler.CurrentTask->TaskState = ready ;
		}
	}
}
 8000988:	e027      	b.n	80009da <Decide_WhatNextTask+0x92>
		FIFO_dequeue(&Ready_queue, &OS_Control_schaduler.NextTask);
 800098a:	4917      	ldr	r1, [pc, #92]	; (80009e8 <Decide_WhatNextTask+0xa0>)
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <Decide_WhatNextTask+0x98>)
 800098e:	f7ff fc5d 	bl	800024c <FIFO_dequeue>
		OS_Control_schaduler.NextTask->TaskState = Running ;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 8000994:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000998:	2201      	movs	r2, #1
 800099a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control_schaduler.CurrentTask->priority == OS_Control_schaduler.NextTask->priority )&&(OS_Control_schaduler.CurrentTask->TaskState != Suspend))
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 80009a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a4:	791a      	ldrb	r2, [r3, #4]
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 80009a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d113      	bne.n	80009da <Decide_WhatNextTask+0x92>
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 80009b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00c      	beq.n	80009da <Decide_WhatNextTask+0x92>
			FIFO_enqueue(&Ready_queue, OS_Control_schaduler.CurrentTask);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 80009c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <Decide_WhatNextTask+0x98>)
 80009ca:	f7ff fbfd 	bl	80001c8 <FIFO_enqueue>
			OS_Control_schaduler.CurrentTask->TaskState = ready ;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <Decide_WhatNextTask+0x9c>)
 80009d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d4:	2203      	movs	r2, #3
 80009d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001c8 	.word	0x200001c8
 80009e4:	2000001c 	.word	0x2000001c
 80009e8:	200001c0 	.word	0x200001c0

080009ec <OS_SVC_Handle>:


void  OS_SVC_Handle(int *Stack_frame)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	unsigned char SVC_val_num=*((unsigned char*)((Stack_frame[6])-2));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3318      	adds	r3, #24
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3b02      	subs	r3, #2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	73fb      	strb	r3, [r7, #15]
	switch(SVC_val_num)
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d826      	bhi.n	8000a54 <OS_SVC_Handle+0x68>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <OS_SVC_Handle+0x20>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a21 	.word	0x08000a21
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000a4f 	.word	0x08000a4f
 8000a18:	08000a55 	.word	0x08000a55
 8000a1c:	08000a55 	.word	0x08000a55
	{
	case SVC_Activatetask:
	case SVC_terminateTask:
		//Update Sch Table, Ready Queue
		MyRTOS_Update_Schadule_tables();
 8000a20:	f7ff fe34 	bl	800068c <MyRTOS_Update_Schadule_tables>
		//OS is in Running State
		if (OS_Control_schaduler.OSmodeID == OsRunning)
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <OS_SVC_Handle+0x78>)
 8000a26:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d114      	bne.n	8000a58 <OS_SVC_Handle+0x6c>
		{
			if (strcmp(OS_Control_schaduler.CurrentTask->TaskName,"Idle task") != 0)
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <OS_SVC_Handle+0x78>)
 8000a30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a34:	331c      	adds	r3, #28
 8000a36:	490c      	ldr	r1, [pc, #48]	; (8000a68 <OS_SVC_Handle+0x7c>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fb99 	bl	8000170 <strcmp>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <OS_SVC_Handle+0x6c>
			{
				//Decide what Next
				Decide_WhatNextTask();
 8000a44:	f7ff ff80 	bl	8000948 <Decide_WhatNextTask>

				//trigger OS_pendSV (Switch Context/Restore)
				trigger_OS_PendSV();
 8000a48:	f7ff fcb2 	bl	80003b0 <trigger_OS_PendSV>
			}
		}
		break;
 8000a4c:	e004      	b.n	8000a58 <OS_SVC_Handle+0x6c>
	case SVC_TaskWaitingTime:
		MyRTOS_Update_Schadule_tables();
 8000a4e:	f7ff fe1d 	bl	800068c <MyRTOS_Update_Schadule_tables>
		break;
 8000a52:	e002      	b.n	8000a5a <OS_SVC_Handle+0x6e>
	case SVC_AquireMutex:
		break;
	case SVC_ReleaseMutex:
		break;
	default :
		break;
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <OS_SVC_Handle+0x6e>
		break;
 8000a58:	bf00      	nop
	}

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000001c 	.word	0x2000001c
 8000a68:	08000d78 	.word	0x08000d78

08000a6c <MYRTOS_STARTOS>:


void MYRTOS_STARTOS()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	OS_Control_schaduler.OSmodeID = OsRunning ;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MYRTOS_STARTOS+0x54>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control_schaduler.CurrentTask = &Idle_task ;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MYRTOS_STARTOS+0x54>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MYRTOS_STARTOS+0x58>)
 8000a7c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&Idle_task);
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MYRTOS_STARTOS+0x58>)
 8000a82:	f7ff fe61 	bl	8000748 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a86:	f7ff fca1 	bl	80003cc <Start_Ticker>

	OS_SET_PSP(OS_Control_schaduler.CurrentTask->Current_PSP);
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MYRTOS_STARTOS+0x54>)
 8000a8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_MSP_to_PSP;
 8000a98:	f3ef 8014 	mrs	r0, CONTROL
 8000a9c:	f04f 0102 	mov.w	r1, #2
 8000aa0:	ea40 0001 	orr.w	r0, r0, r1
 8000aa4:	f380 8814 	msr	CONTROL, r0
	OS_CONVERT_to_unprivileged;
 8000aa8:	f3ef 8014 	mrs	r0, CONTROL
 8000aac:	f040 0001 	orr.w	r0, r0, #1
 8000ab0:	f380 8814 	msr	CONTROL, r0
	Idle_task.p_TaskEntry();
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <MYRTOS_STARTOS+0x58>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	4798      	blx	r3
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000001c 	.word	0x2000001c
 8000ac4:	2000036c 	.word	0x2000036c

08000ac8 <Task_wait_handle>:



void Task_wait_handle()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

	int n=OS_Control_schaduler.NoOfActiveTasks;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <Task_wait_handle+0x7c>)
 8000ad0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ad4:	607b      	str	r3, [r7, #4]
	while(n--)
 8000ad6:	e02a      	b.n	8000b2e <Task_wait_handle+0x66>
	{
		if(OS_Control_schaduler.OSTasks[n]->TaskState == Suspend)
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <Task_wait_handle+0x7c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d122      	bne.n	8000b2e <Task_wait_handle+0x66>
		{
			if(OS_Control_schaduler.OSTasks[n]->TimingWaiting.Blocking == Enable)
 8000ae8:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <Task_wait_handle+0x7c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d11a      	bne.n	8000b2e <Task_wait_handle+0x66>
			{
				if(--(OS_Control_schaduler.OSTasks[n]->TimingWaiting.Ticks_Count) == 0)
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <Task_wait_handle+0x7c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	3a01      	subs	r2, #1
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d110      	bne.n	8000b2e <Task_wait_handle+0x66>
				{
					OS_Control_schaduler.OSTasks[n]->TimingWaiting.Blocking =Disable;
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <Task_wait_handle+0x7c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control_schaduler.OSTasks[n]->TaskState =Waiting;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <Task_wait_handle+0x7c>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	2202      	movs	r2, #2
 8000b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					OS_SVC_SET(SVC_TaskWaitingTime);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fd3f 	bl	80005ac <OS_SVC_SET>
	while(n--)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1cf      	bne.n	8000ad8 <Task_wait_handle+0x10>
				}
			}
		}
	}

}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000001c 	.word	0x2000001c

08000b48 <MYRTOS_TaskWait>:


void MYRTOS_TaskWait(unsigned int NoTICKS,Task_ref* SelfTref)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]

	SelfTref->TimingWaiting.Blocking =Enable;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimingWaiting.Ticks_Count = NoTICKS;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	641a      	str	r2, [r3, #64]	; 0x40
	MYRTOS_TerminateTask(SelfTref);
 8000b60:	6838      	ldr	r0, [r7, #0]
 8000b62:	f7ff fe00 	bl	8000766 <MYRTOS_TerminateTask>


}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <task1>:
unsigned ToggleLedTask1;
unsigned ToggleLedTask2;
unsigned ToggleLedTask3;

void task1()
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	while(1)
	{
		ToggleLedTask1 ^=1;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <task1+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	4a01      	ldr	r2, [pc, #4]	; (8000b84 <task1+0x14>)
 8000b7e:	6013      	str	r3, [r2, #0]
	__asm("nop");
 8000b80:	bf00      	nop
		ToggleLedTask1 ^=1;
 8000b82:	e7f7      	b.n	8000b74 <task1+0x4>
 8000b84:	2000047c 	.word	0x2000047c

08000b88 <task2>:
	}


}
void task2()
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	while(1)
	{
	ToggleLedTask2 ^=1;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <task2+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	4a01      	ldr	r2, [pc, #4]	; (8000b9c <task2+0x14>)
 8000b96:	6013      	str	r3, [r2, #0]

	__asm("nop");
 8000b98:	bf00      	nop
	ToggleLedTask2 ^=1;
 8000b9a:	e7f7      	b.n	8000b8c <task2+0x4>
 8000b9c:	20000480 	.word	0x20000480

08000ba0 <task3>:
	}
}

void task3()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	while(1)
	{
	ToggleLedTask3 ^=1;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <task3+0x1c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f083 0301 	eor.w	r3, r3, #1
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <task3+0x1c>)
 8000bae:	6013      	str	r3, [r2, #0]
	MYRTOS_TaskWait(0xf, &Task3);
 8000bb0:	4903      	ldr	r1, [pc, #12]	; (8000bc0 <task3+0x20>)
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f7ff ffc8 	bl	8000b48 <MYRTOS_TaskWait>
	__asm("nop");
 8000bb8:	bf00      	nop
	ToggleLedTask3 ^=1;
 8000bba:	e7f3      	b.n	8000ba4 <task3+0x4>
 8000bbc:	20000484 	.word	0x20000484
 8000bc0:	20000438 	.word	0x20000438

08000bc4 <main>:
	}
}
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	 HW_init();
 8000bc8:	f7ff fbde 	bl	8000388 <HW_init>

	if( MYRTOS_init() != NoError )
 8000bcc:	f7ff fcb0 	bl	8000530 <MYRTOS_init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d000      	beq.n	8000bd8 <main+0x14>
	{
		while(1);
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x12>
	}

	strcpy(Task1.TaskName ,"TASK A");
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <main+0xd0>)
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <main+0xd4>)
 8000bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be0:	6018      	str	r0, [r3, #0]
 8000be2:	3304      	adds	r3, #4
 8000be4:	8019      	strh	r1, [r3, #0]
 8000be6:	3302      	adds	r3, #2
 8000be8:	0c0a      	lsrs	r2, r1, #16
 8000bea:	701a      	strb	r2, [r3, #0]
	Task1.Stack_Size=400;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <main+0xd8>)
 8000bee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bf2:	601a      	str	r2, [r3, #0]
	Task1.priority=5;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <main+0xd8>)
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	711a      	strb	r2, [r3, #4]
	Task1.p_TaskEntry=task1;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <main+0xd8>)
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <main+0xdc>)
 8000bfe:	609a      	str	r2, [r3, #8]


	strcpy(Task2.TaskName ,"TASK B");
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <main+0xe0>)
 8000c02:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <main+0xe4>)
 8000c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c08:	6018      	str	r0, [r3, #0]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	8019      	strh	r1, [r3, #0]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	0c0a      	lsrs	r2, r1, #16
 8000c12:	701a      	strb	r2, [r3, #0]
	Task2.Stack_Size=400;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <main+0xe8>)
 8000c16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c1a:	601a      	str	r2, [r3, #0]
	Task2.priority=5;
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <main+0xe8>)
 8000c1e:	2205      	movs	r2, #5
 8000c20:	711a      	strb	r2, [r3, #4]
	Task2.p_TaskEntry=task2;
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <main+0xe8>)
 8000c24:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <main+0xec>)
 8000c26:	609a      	str	r2, [r3, #8]

	strcpy(Task3.TaskName ,"TASK C");
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <main+0xf0>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <main+0xf4>)
 8000c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c30:	6018      	str	r0, [r3, #0]
 8000c32:	3304      	adds	r3, #4
 8000c34:	8019      	strh	r1, [r3, #0]
 8000c36:	3302      	adds	r3, #2
 8000c38:	0c0a      	lsrs	r2, r1, #16
 8000c3a:	701a      	strb	r2, [r3, #0]
	Task3.Stack_Size=400;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <main+0xf8>)
 8000c3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c42:	601a      	str	r2, [r3, #0]
	Task3.priority=3;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <main+0xf8>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	711a      	strb	r2, [r3, #4]
	Task3.p_TaskEntry=task3;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <main+0xf8>)
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <main+0xfc>)
 8000c4e:	609a      	str	r2, [r3, #8]

	 if( MYRTOS_CreateTask(&Task1) != NoError )
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <main+0xd8>)
 8000c52:	f7ff fc2f 	bl	80004b4 <MYRTOS_CreateTask>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <main+0x9a>
	 	{
	 		while(1);
 8000c5c:	e7fe      	b.n	8000c5c <main+0x98>
	 	}
	 if( MYRTOS_CreateTask(&Task2) != NoError )
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <main+0xe8>)
 8000c60:	f7ff fc28 	bl	80004b4 <MYRTOS_CreateTask>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d000      	beq.n	8000c6c <main+0xa8>
		 	{
		 		while(1);
 8000c6a:	e7fe      	b.n	8000c6a <main+0xa6>
		 	}
	 if( MYRTOS_CreateTask(&Task3) != NoError )
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <main+0xf8>)
 8000c6e:	f7ff fc21 	bl	80004b4 <MYRTOS_CreateTask>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d000      	beq.n	8000c7a <main+0xb6>
		 	{
		 		while(1);
 8000c78:	e7fe      	b.n	8000c78 <main+0xb4>
		 	}
	 MYRTOS_ActivateTask (&Task1);
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <main+0xd8>)
 8000c7c:	f7ff fd64 	bl	8000748 <MYRTOS_ActivateTask>
	 MYRTOS_ActivateTask (&Task2);
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <main+0xe8>)
 8000c82:	f7ff fd61 	bl	8000748 <MYRTOS_ActivateTask>
	 MYRTOS_ActivateTask (&Task3);
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0xf8>)
 8000c88:	f7ff fd5e 	bl	8000748 <MYRTOS_ActivateTask>

	  MYRTOS_STARTOS();
 8000c8c:	f7ff feee 	bl	8000a6c <MYRTOS_STARTOS>

    /* Loop forever */
	for(;;);
 8000c90:	e7fe      	b.n	8000c90 <main+0xcc>
 8000c92:	bf00      	nop
 8000c94:	200003cc 	.word	0x200003cc
 8000c98:	08000d84 	.word	0x08000d84
 8000c9c:	200003b0 	.word	0x200003b0
 8000ca0:	08000b71 	.word	0x08000b71
 8000ca4:	20000410 	.word	0x20000410
 8000ca8:	08000d8c 	.word	0x08000d8c
 8000cac:	200003f4 	.word	0x200003f4
 8000cb0:	08000b89 	.word	0x08000b89
 8000cb4:	20000454 	.word	0x20000454
 8000cb8:	08000d94 	.word	0x08000d94
 8000cbc:	20000438 	.word	0x20000438
 8000cc0:	08000ba1 	.word	0x08000ba1

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f000 f811 	bl	8000d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff ff65 	bl	8000bc4 <main>

08000cfa <LoopForever>:

LoopForever:
  b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d08:	08000da4 	.word	0x08000da4
  ldr r2, =_sbss
 8000d0c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d10:	20000488 	.word	0x20000488

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <__libc_init_array>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4d0c      	ldr	r5, [pc, #48]	; (8000d50 <__libc_init_array+0x38>)
 8000d1e:	4c0d      	ldr	r4, [pc, #52]	; (8000d54 <__libc_init_array+0x3c>)
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	42a6      	cmp	r6, r4
 8000d26:	d109      	bne.n	8000d3c <__libc_init_array+0x24>
 8000d28:	f000 f81a 	bl	8000d60 <_init>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	4d0a      	ldr	r5, [pc, #40]	; (8000d58 <__libc_init_array+0x40>)
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <__libc_init_array+0x44>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	42a6      	cmp	r6, r4
 8000d38:	d105      	bne.n	8000d46 <__libc_init_array+0x2e>
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d40:	4798      	blx	r3
 8000d42:	3601      	adds	r6, #1
 8000d44:	e7ee      	b.n	8000d24 <__libc_init_array+0xc>
 8000d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4a:	4798      	blx	r3
 8000d4c:	3601      	adds	r6, #1
 8000d4e:	e7f2      	b.n	8000d36 <__libc_init_array+0x1e>
 8000d50:	08000d9c 	.word	0x08000d9c
 8000d54:	08000d9c 	.word	0x08000d9c
 8000d58:	08000d9c 	.word	0x08000d9c
 8000d5c:	08000da0 	.word	0x08000da0

08000d60 <_init>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr

08000d6c <_fini>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr
